{"/home/travis/build/npmtest/node-npmtest-gulp-deploy-git/test.js":"/* istanbul instrument in package npmtest_gulp_deploy_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-deploy-git/lib.npmtest_gulp_deploy_git.js":"/* istanbul instrument in package npmtest_gulp_deploy_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_deploy_git = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_deploy_git = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-deploy-git/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-deploy-git && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_deploy_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_deploy_git\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_deploy_git.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_deploy_git.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_deploy_git.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_deploy_git.__dirname + '/lib.npmtest_gulp_deploy_git.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-deploy-git/node_modules/gulp-deploy-git/index.js":"var assign   = require('object-assign');\nvar async    = require('async');\nvar fs       = require('fs');\nvar gutil    = require('gulp-util');\nvar mkdirp   = require('mkdirp');\nvar path     = require('path');\nvar rimraf   = require('rimraf');\nvar spawn    = require('child_process').spawn;\nvar through  = require('through2');\n\nmodule.exports = function(options) {\n  options = assign({}, {\n    prefix: '',\n    message: '',\n    repository: '',\n    remoteBranch: 'master',\n    branches: ['master'],\n    verbose: false,\n    debug: false\n  }, options);\n\n  options.prefix = options.prefix.replace('/', path.sep);\n\n  const PLUGIN_NAME = 'gulp-deploy-git';\n\n  var branch = null;\n  var files = [];\n  var repoPath = path.normalize(path.join(process.cwd(), 'deploy-' + Date.now()));\n\n  return through.obj(function(file, enc, callback) {\n    if (file.isBuffer()) {\n      return callback('Buffers are not supported');\n    }\n    var p = path.normalize(path.relative(file.cwd, file.path));\n    if (options.debug) gutil.log(gutil.colors.magenta('processing file: ') + p);\n    if (options.prefix.length > 0 && p.indexOf(options.prefix) === 0) {\n      p = p.substr(options.prefix.length + 1);\n      if (options.debug) gutil.log(gutil.colors.magenta('  stripped prefix to: ') + p);\n    }\n    files.push({\n      path: file.path,\n      dest: path.join(repoPath, p)\n    });\n    callback(null, file);\n  }, function(done) {\n    async.waterfall([\n      function checkBranch(callback) {\n        if (process.env['GIT_BRANCH'] === undefined) {\n          cmdRevParse = spawn('git', ['rev-parse', '--abbrev-ref', 'HEAD']);\n          cmdRevParse.stderr.on('data', function(data) {\n            if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git rev-parse: ') + data.toString().trim());\n          });\n          cmdRevParse.stdout.on('data', function(data) {\n            if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git rev-parse: ') + data.toString().trim());\n            branch = data.toString().trim();\n            if (branch.indexOf('refs/heads/') > -1) {\n              branch = branch.substr(branch.lastIndexOf('refs/heads/') + 1);\n            }\n            gutil.log(gutil.colors.yellow('Current branch: ' + branch));\n          });\n          cmdRevParse.on('close', function(code) {\n            if (code !== 0) {\n              return callback('git rev-parse exited with code ' + code);\n            }\n            var found = false;\n            options.branches.forEach(function (b) {\n              if (branch === b) {\n                found = true;\n              }\n            });\n            if (!found) {\n              return callback('doNotDeployBranch');\n            }\n            callback(null);\n          });\n        } else {\n          branch = process.env['GIT_BRANCH'];\n          if (branch.indexOf('refs/heads/') > -1) {\n            branch = branch.substr(branch.lastIndexOf('refs/heads/') + 11);\n          }\n          var found = false;\n          options.branches.forEach(function (b) {\n            if (branch === b) {\n              found = true;\n            }\n          });\n          if (!found) {\n            return callback('doNotDeployBranch');\n          }\n          callback(null);\n        }\n      },\n      function gitClone(callback) {\n        gutil.log(gutil.colors.yellow('Cloning remote deployment repository'));\n        var cmdClone = spawn('git', ['clone', '-b', options.remoteBranch, '--single-branch', options.repository, repoPath]);\n        cmdClone.on('data', function(data) { gutil.log(data.toString()); });\n        cmdClone.stderr.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git clone: ') + data.toString().trim());\n        });\n        cmdClone.stdout.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git clone: ') + data.toString().trim());\n        });\n        cmdClone.on('close', function(code) {\n          if (code !== 0) {\n            return callback('git clone exited with code ' + code);\n          }\n          return callback(null);\n        });\n      },\n      function removeFiles(callback) {\n        gutil.log(gutil.colors.yellow('Cleaning deployment repository folder'));\n        var clean = function(folder) {\n          fs.readdirSync(folder).forEach(function(file) {\n            var filePath = path.normalize(path.join(folder, file));\n            stats = fs.lstatSync(filePath);\n            if (stats.isDirectory()) {\n              if (file !== '.git') {\n                clean(filePath, callback);\n              }\n              return;\n            }\n            fs.unlinkSync(filePath);\n          });\n        }\n        try {\n          clean(repoPath);\n          callback(null);\n        } catch (err) {\n          callback(err);\n        }\n      },\n      function copySources(callback) {\n        gutil.log(gutil.colors.yellow('Copying source files to deployment folder'));\n        try {\n          files.forEach(function(file) {\n            stats = fs.lstatSync(file.path);\n            if (stats.isDirectory()) {\n              if (options.verbose || options.debug) gutil.log('skipping: ' + gutil.colors.magenta(file.path));\n              return;\n            }\n            if (options.verbose || options.debug) gutil.log('copying: ' + gutil.colors.magenta(file.path) + ' to ' + gutil.colors.magenta(file.dest));\n            mkdirp.sync(path.dirname(file.dest));\n            fs.writeFileSync(file.dest, fs.readFileSync(file.path));\n          })\n          callback(null);\n        } catch (err) {\n          callback(err);\n        }\n      },\n      function gitAdd(callback) {\n        var cmdAdd = spawn('git', ['add', '--all', '.'], {cwd: repoPath});\n        cmdAdd.stderr.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git add: ') + data.toString().trim());\n        });\n        cmdAdd.stdout.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git add: ') + data.toString().trim());\n        });\n        cmdAdd.on('close', function(code) {\n          if (code !== 0) {\n            return callback('git add exited with code ' + code);\n          }\n          return callback(null);\n        });\n      },\n      function gitLog(callback) {\n        if (options.message.length === 0) {\n          var cmdLog = spawn('git', ['log', '-1', '--oneline']);\n          cmdLog.stderr.on('data', function(data) {\n            if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git log: ') + data.toString().trim());\n          });\n          cmdLog.stdout.on('data', function(data) {\n            if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git log: ') + data.toString().trim());\n            options.message = data.toString().trim();\n          });\n          cmdLog.on('close', function(code) {\n            if (code !== 0) {\n              return callback('git log exited with code ' + code);\n            }\n            callback(null);\n          });\n        } else {\n          callback(null);\n        }\n      },\n      function gitCommit(callback) {\n        gutil.log(gutil.colors.yellow('Committing changes to deployment repository'));\n        var cmdCommit = spawn('git', ['commit', '-m', options.message], {cwd: repoPath});\n        cmdCommit.stderr.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git commit: ') + data.toString().trim());\n        });\n        cmdCommit.stdout.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git commit: ') + data.toString().trim());\n        });\n        cmdCommit.on('close', function(code) {\n          if (code === 1) {\n            return callback('noChanges');\n          }\n          if (code !== 0) {\n            return callback('git commit exited with code ' + code);\n          }\n          return callback(null);\n        });\n      },\n      function gitPush(callback) {\n        gutil.log(gutil.colors.yellow('Pushing to remote deployment repository'));\n        var cmdPush = spawn('git', ['push', 'origin', options.remoteBranch], {cwd: repoPath});\n        cmdPush.stderr.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git push: ') + data.toString().trim());\n        });\n        cmdPush.stdout.on('data', function(data) {\n          if (options.verbose || options.debug) gutil.log(gutil.colors.magenta('git push: ') + data.toString().trim());\n        });\n        cmdPush.on('close', function(code) {\n          if (code !== 0) {\n            return callback('git push exited with code ' + code);\n          }\n          return callback(null);\n        });\n      }\n  ], function(err) {\n      try {\n        var repoStat = fs.lstatSync(repoPath);\n        if (repoStat.isDirectory()) {\n          gutil.log(gutil.colors.yellow('Removing local deployment folder'));\n          rimraf(repoPath, function(err) {\n            if (err) {\n              gutil.log(gutil.colors.red('Failed to remove local deployment folder'));\n            }\n          });\n        }\n      } catch (err) {\n      }\n      if (err) {\n        switch (err) {\n        case 'doNotDeployBranch':\n          gutil.log(gutil.colors.magenta('Branch ' + branch + ' not configured to deploy, skipping'));\n          break;\n        case 'noChanges':\n          gutil.log(gutil.colors.magenta('No changes to deployment files, skipping'));\n          break;\n        default:\n          done(new gutil.PluginError(PLUGIN_NAME, err));\n        }\n      }\n      done(null);\n    });\n  });\n}\n"}